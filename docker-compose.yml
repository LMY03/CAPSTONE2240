services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_CAP2240_DATABASE}
      MYSQL_USER: ${MYSQL_CAP2240_USER}
      MYSQL_PASSWORD: ${MYSQL_CAP2240_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./guacdb.sql:/docker-entrypoint-initdb.d/guacdb.sql
      # - ./cap2240.sql:/docker-entrypoint-initdb.d/cap2240.sql
    healthcheck:
      test: ["CMD", "mysql", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}", "-e", "SELECT 1"]
      timeout: 20s
      retries: 10

  django:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: CAP-2240
    command: sh -c "python3 manage.py migrate --noinput && python3 manage.py runserver 0.0.0.0:8000"
    # command: sh -c "python3 manage.py migrate --noinput && python manage.py runserver 0.0.0.0:8000"
    # command: sh -c "python3 manage.py makemigrations && python3 manage.py migrate --noinput && python manage.py runserver 0.0.0.0:8000"
    # command: sh -c "python3 manage.py migrate --noinput && python3 manage.py collectstatic --noinput && python manage.py runserver 0.0.0.0:8000"
    restart: always
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      celery:
        condition: service_healthy

  guacamole:
    image: guacamole/guacamole:latest
    container_name: guacamole
    restart: always
    ports:
      - "8080:8080"
    environment:
      GUACD_HOSTNAME: guacd
      MYSQL_HOSTNAME: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: ${MYSQL_GUACAMOLE_DB}
      MYSQL_USER: ${MYSQL_GUACAMOLE_USER}
      MYSQL_PASSWORD: ${MYSQL_GUACAMOLE_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    depends_on:
      - guacd
      - mysql

  guacd:
    image: guacamole/guacd:latest
    container_name: guacd
    restart: always
    ports:
      - "4822:4822"
    
  influxdb:
    image: influxdb:latest
    container_name: influxdb
    restart: always
    ports:
      - "8086:8086"
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USERNAME}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET}
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${INFLUX_TOKEN}
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2

  redis:
    image: redis:6.0
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery
    command: >
      bash -c "celery -A CAPSTONE2240 worker --loglevel=info --concurrency=1 &&
               celery -A CAPSTONE2240 beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    restart: always
    volumes:
      - .:/app
    depends_on:
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "celery -A CAPSTONE2240 status"]
      interval: 15s
      timeout: 5s
      retries: 5

volumes:
  mysql_data:
  influxdb_data:
  influxdb_config:

# References

# https://medium.com/@akshatgadodia/dockerizing-a-django-and-mysql-application-a-step-by-step-guide-d4ba181d3de5
# https://www.youtube.com/watch?v=GGb1C-4mTCw
# https://community.influxdata.com/t/docker-compose-example/25627
