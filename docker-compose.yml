services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_CAP2240_DATABASE}
      MYSQL_USER: ${MYSQL_CAP2240_USER}
      MYSQL_PASSWORD: ${MYSQL_CAP2240_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysql", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}", "-e", "SELECT 1"]
      timeout: 20s
      retries: 10

  django:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: CAP-2240
    # command: sh -c "python manage.py runserver 0.0.0.0:8000"
    command: sh -c "python3 manage.py migrate --noinput && python manage.py runserver 0.0.0.0:8000"
    # command: sh -c "python3 manage.py makemigrations && python3 manage.py migrate --noinput && python manage.py runserver 0.0.0.0:8000"
    # command: sh -c "python3 manage.py migrate --noinput && python3 manage.py collectstatic --noinput && python manage.py runserver 0.0.0.0:8000"
    restart: always
    volumes:
      - .:/app
      - /home/${USERNAME}/.ssh/id_rsa:/root/.ssh/id_rsa:ro
      - /home/${USERNAME}/.ssh/id_rsa.pub:/root/.ssh/id_rsa.pub:ro
    ports:
      - "8000:8000"
    environment:
      ANSIBLE_HOST_KEY_CHECKING: "False"
    env_file:
      - .env
    depends_on:
      mysql:
        condition: service_healthy
      # ansible:
      #   condition: service_started
    # links:
    #   - ansible

  guacamole:
    image: guacamole/guacamole:latest
    container_name: guacamole
    restart: always
    ports:
      - "8080:8080"
    environment:
      GUACD_HOSTNAME: guacd
      MYSQL_HOSTNAME: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: ${MYSQL_GUACAMOLE_DB}
      MYSQL_USER: ${MYSQL_GUACAMOLE_USER}
      MYSQL_PASSWORD: ${MYSQL_GUACAMOLE_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    depends_on:
      - guacd
      - mysql

  guacd:
    image: guacamole/guacd:latest
    container_name: guacd
    restart: always
    ports:
      - "4822:4822"
    
  influxdb:
    image: influxdb:latest
    container_name: influxdb
    restart: always
    ports:
      - "8086:8086"
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: ${INFLUXDB_USERNAME}
      DOCKER_INFLUXDB_INIT_PASSWORD: ${INFLUXDB_PASSWORD}
      DOCKER_INFLUXDB_INIT_ORG: ${INFLUXDB_ORG}
      DOCKER_INFLUXDB_INIT_BUCKET: ${INFLUXDB_BUCKET}
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2

  # netdata:
  #   image: netdata/netdata:latest
  #   container_name: netdata
  #   hostname: CAP-2240
  #   pid: host
  #   network_mode: host
  #   restart: unless-stopped
  #   ports:
  #     - "19999:19999"
  #   cap_add:
  #     - SYS_PTRACE
  #     - SYS_ADMIN
  #   security_opt:
  #     - apparmor:unconfined
  #   volumes:
  #     - netdataconfig:/etc/netdata
  #     - netdatalib:/var/lib/netdata
  #     - netdatacache:/var/cache/netdata
  #     - /etc/passwd:/host/etc/passwd:ro
  #     - /etc/group:/host/etc/group:ro
  #     - /etc/localtime:/etc/localtime:ro
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /etc/os-release:/host/etc/os-release:ro
  #     - /var/log:/host/var/log:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro

  # ansible:
  #   image: cytopia/ansible:latest
  #   restart: always
  #   container_name: ansible
  #   volumes:
  #     - /home/${USERNAME}/playbooks:/playbooks
  #     - /home/${USERNAME}/inventory:/inventory
  #     - /home/${USERNAME}/.ssh/id_rsa:/root/.ssh/id_rsa:ro
  #     - /home/${USERNAME}/.ssh/id_rsa.pub:/root/.ssh/id_rsa.pub:ro
  #   environment:
  #     ANSIBLE_HOST_KEY_CHECKING: "False"
  #   working_dir: /playbooks
  #   entrypoint: ["sh", "-c"]
  #   command: ["apk update && apk add --no-cache openssh-client && tail -f /dev/null"]

volumes:
  mysql_data:
  influxdb_data:
  influxdb_config:
  # netdataconfig:
  # netdatalib:
  # netdatacache:

# References

# https://medium.com/@akshatgadodia/dockerizing-a-django-and-mysql-application-a-step-by-step-guide-d4ba181d3de5
# https://www.youtube.com/watch?v=GGb1C-4mTCw
# https://community.influxdata.com/t/docker-compose-example/25627
